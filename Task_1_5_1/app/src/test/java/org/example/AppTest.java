/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import static org.junit.jupiter.api.Assertions.*;

import org.example.enums.Alignment;
import org.junit.jupiter.api.Test;

class AppTest {
    @Test
    void serializePlainText() {
        Text text = new Text("Hello, World!");
        assertEquals("Hello, World!", text.serialize());
    }

    @Test
    void serializeBoldText() {
        Text.Bold bold = new Text.Bold("Important");
        assertEquals("**Important**", bold.serialize());
    }

    @Test
    void testSerializeOrderedList() {
        List_M orderedList = new List_M(true);
        orderedList.addItem("First item");
        orderedList.addItem("Second item");
        orderedList.addItem("Third item");

        String expected = "1. First item\n2. Second item\n3. Third item\n";
        assertEquals(expected, orderedList.serialize());
    }

    @Test
    void testSerializeUnorderedList() {
        List_M unorderedList = new List_M(false);
        unorderedList.addItem("First item");
        unorderedList.addItem("Second item");
        unorderedList.addItem("Third item");

        String expected = "- First item\n- Second item\n- Third item\n";
        assertEquals(expected, unorderedList.serialize());
    }

    @Test
    void serializeHeaderLevel1() {
        Header header = new Header(1, "Main Title");
        assertEquals("# Main Title\n", header.serialize());
    }

    @Test
    void serializeHeaderLevel3() {
        Header header = new Header(3, "Subsection");
        assertEquals("### Subsection\n", header.serialize());
    }

    @Test
    void buildTableWithAlignmentAndRowLimit() {
        Table.Builder tableBuilder =
                new Table.Builder()
                        .withAlignments(Alignment.ALIGN_RIGHT, Alignment.ALIGN_LEFT)
                        .withRowLimit(2)
                        .addRow("Index", "Random")
                        .addRow(1, new Text.Bold("8"))
                        .addRow(2, "2");
        Table table = tableBuilder.build();

        // Ожидаемый результат с учетом выравнивания и одинаковой ширины ячеек
        String expected =
                "| Index | Random | \n"
                        + "| ----: | :----- | \n"
                        + "|     1 | **8**  | \n"
                        + "|     2 | 2      | \n";

        assertEquals(expected, table.serialize());
    }

    @Test
    void testEquals_Text() {
        Text text1 = new Text("Hello");
        Text text2 = new Text("Hello");
        assertTrue(text1.equals(text2));
    }

    @Test
    void testNotEquals_DifferentContent() {
        Text text1 = new Text("Hello");
        Text text2 = new Text("World");
        assertFalse(text1.equals(text2));
    }

    @Test
    void testNotEquals_DifferentType() {
        Text text = new Text("Hello");
        Header header = new Header(1, "Hello");
        assertFalse(text.equals(header));
    }

    @Test
    void testSerializeQuote() {
        Quote quote = new Quote("This is a quote");
        String expected = "> This is a quote\n";
        assertEquals(expected, quote.serialize());
    }

    @Test
    void testSerializeImage() {
        Image image = new Image("Alt text", "http://example.com/image.png");
        String expected = "![Alt text](http://example.com/image.png)";
        assertEquals(expected, image.serialize());
    }

    @Test
    void testSerializeWithoutLanguage() {
        CodeBlock codeBlock = new CodeBlock("print('Hello, World!')");
        String expected = "```\nprint('Hello, World!')\n```";
        assertEquals(expected, codeBlock.serialize());
    }

    @Test
    void testSerializeWithLanguage() {
        CodeBlock codeBlock = new CodeBlock("print('Hello, World!')", "python");
        String expected = "```python\nprint('Hello, World!')\n```";
        assertEquals(expected, codeBlock.serialize());
    }

    @Test
    void testSerializeCompleted() {
        Task task = new Task(true, "Complete the task");
        String expected = "[x] Complete the task";
        assertEquals(expected, task.serialize());
    }

    @Test
    void testSerializeNotCompleted() {
        Task task = new Task(false, "Complete the task");
        String expected = "[ ] Complete the task";
        assertEquals(expected, task.serialize());
    }
}
