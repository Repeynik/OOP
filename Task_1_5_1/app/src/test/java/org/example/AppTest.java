/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

class AppTest {
    @Test
    void serializePlainText() {
        Text text = new Text("Hello, World!");
        assertEquals("Hello, World!", text.serialize());
    }

    @Test
    void serializeBoldText() {
        Text.Bold bold = new Text.Bold("Important");
        assertEquals("**Important**", bold.serialize());
    }

    @Test
    void serializeUnorderedList() {
        List_M list = new List_M(false);
        list.addItem("Item 1");
        list.addItem("Item 2");
        assertEquals("- Item 1\n- Item 2\n", list.serialize());
    }

    @Test
    void serializeOrderedList() {
        List_M list = new List_M(true);
        list.addItem("Step 1");
        list.addItem("Step 2");
        assertEquals("1. Step 1\n2. Step 2\n", list.serialize());
    }

    @Test
    void serializeHeaderLevel1() {
        Header header = new Header(1, "Main Title");
        assertEquals("# Main Title\n", header.serialize());
    }

    @Test
    void serializeHeaderLevel3() {
        Header header = new Header(3, "Subsection");
        assertEquals("### Subsection\n", header.serialize());
    }

    // @Test
    // void buildTableWithAlignmentAndRowLimit() {
    //     Table.Builder tableBuilder = new Table.Builder()
    //             .withAlignments(Alignment.ALIGN_RIGHT, Alignment.ALIGN_LEFT)
    //             .withRowLimit(2)
    //             .addRow("Index", "Random")
    //             .addRow(1, new Text.Bold("8"))
    //             .addRow(2, "2");
    //     Table table = tableBuilder.build();
    //     String expected = "| Index | Random |\n" +
    //             "| -----:| ------ |\n" +
    //             "| 1 | **8** |\n" +
    //             "| 2 | 2 |\n";
    //     assertEquals(expected, table.serialize());
    // }

    @Test
    void testEquals_Text() {
        Text text1 = new Text("Hello");
        Text text2 = new Text("Hello");
        assertTrue(text1.equals(text2));
    }

    @Test
    void testNotEquals_DifferentContent() {
        Text text1 = new Text("Hello");
        Text text2 = new Text("World");
        assertFalse(text1.equals(text2));
    }

    @Test
    void testNotEquals_DifferentType() {
        Text text = new Text("Hello");
        Header header = new Header(1, "Hello");
        assertFalse(text.equals(header));
    }
}
