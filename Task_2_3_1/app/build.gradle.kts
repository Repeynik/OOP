/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    application
    java
    jacoco
    id("com.diffplug.spotless") version "7.0.0.BETA2"
    id("org.openjfx.javafxplugin") version "0.1.0"
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation("org.openjfx:javafx-controls:20")

    implementation("org.openjfx:javafx-fxml:20")
    implementation("org.jfree:jfreechart:1.5.3")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.13.3")
}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.MainApp"
}

tasks.jacocoTestReport {
    val reportDir = file("../build/reports/jacoco/test")
    reports.xml.outputLocation = reportDir.resolve("jacocoTestReport.xml")
    reports {
        xml.required = true
    }

}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
    finalizedBy(tasks.javadoc)
}


tasks.javadoc {
    destinationDir = file("../build/docs/javadoc")
}

tasks.named<JavaExec>("run") {
    standardInput = System.`in`
}

spotless {
    java {
        googleJavaFormat().aosp().reflowLongStrings().formatJavadoc(true).reorderImports(true)
    }
}

javafx {
    version = "21"
    modules = listOf("javafx.controls", "javafx.fxml")
}

sourceSets {
    main {
        resources {
            srcDirs("src/main/resources")
        }
    }
}

tasks.withType<Copy> {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}